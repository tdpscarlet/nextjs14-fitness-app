// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// model User {
//   id            String    @id @default(uuid())
//   createAt      DateTime  @default(now())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   password      String?
// }

model Day {
  id        String     @id @default(cuid())
  value     String     @unique
  createAt  DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  userId    String     @unique
  stat      Stat?
  exercises Exercise[]
  food      Food[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Stat {
  id       String   @id @default(cuid())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  weight   Float?
  neck     Float?
  waist    Float?
  hip      Float?
  dayId    String   @unique

  day Day @relation(fields: [dayId], references: [id], onDelete: Cascade)
}

model Exercise {
  id        Int      @id @default(autoincrement())
  name      String
  exId      String
  setNum    Int
  repPerSet Int
  weiPerSet Int?
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  dayId     String

  day Day @relation(fields: [dayId], references: [id], onDelete: Cascade)

  @@index([dayId])
}

model Food {
  id          String   @id @default(cuid())
  dayId       String
  name        String
  meal        String
  servingSize Int
  calo        Int?
  carb        Int?
  protein     Int?
  totalFat    Int?
  satFat      Int?
  sugar       Int?
  sodium      Int?
  fiber       Int?
  cholesterol Int?
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  Day         Day      @relation(fields: [dayId], references: [id], onDelete: Cascade)

  @@index([dayId])
}

model Goal {
  id      String @id @default(uuid())
  calo    Int    @default(1000)
  carb    Int    @default(65)
  protein Int    @default(15)
  fat     Int    @default(20)
  userId  String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(uuid())
  name          String?
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  createAt      DateTime  @default(now())
  updateAt      DateTime  @updatedAt
  image         String?
  accounts      Account[]
  sessions      Session[]
  goal          Goal?
  days          Day[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
